<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NewTestr</title>
      <link href="/2024/07/12/NewTestr/"/>
      <url>/2024/07/12/NewTestr/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/07/12/test/"/>
      <url>/2024/07/12/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FlowDroid学习流程</title>
      <link href="/2023/11/07/FlowDroid%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
      <url>/2023/11/07/FlowDroid%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="FlowDroid配置及运行"><a href="#FlowDroid配置及运行" class="headerlink" title="FlowDroid配置及运行"></a>FlowDroid配置及运行</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="运行失败"><a href="#运行失败" class="headerlink" title="运行失败"></a>运行失败</h3><p><a href="https://blog.csdn.net/qq_39441603/article/details/129656898">https://blog.csdn.net/qq_39441603/article/details/129656898</a></p><p>参照该帖子</p><p><a href="https://github.com/secure-software-engineering/FlowDroid/releases">https://github.com/secure-software-engineering/FlowDroid/releases</a></p><p>下载FlowDroid_release版并根据教程在</p><ul><li>在.\中新建android\，并放入android.jar<br>android.jar位于Android SDK安装目录下，例如Android Studio运行就需要android.jar，位于AndroidSDK\platforms\android-30\（每个版本有自己的android.jar）</li><li>在.\soot-infoflow-cmd\中新建target\，并放入soot-infoflow-cmd-2.9.0-jar-with-dependencies.jar<br>下载地址例如：<a href="https://github.com/secure-software-engineering/FlowDroid/releases/tag/v2.9">https://github.com/secure-software-engineering/FlowDroid/releases/tag/v2.9</a></li><li>在.\DroidBench\中放入待分析apk</li></ul><p>最后使用命令行模式尝试运行</p><p><img src="https://s2.loli.net/2023/11/07/TOvEwYxBF4g6Jqn.png"></p><p>以为是所分析的apk的entry中包含了. or .. 导致分析失败，换了几个apk后仍然是该错误</p><h3 id="使用Maven进源码编译配置"><a href="#使用Maven进源码编译配置" class="headerlink" title="使用Maven进源码编译配置"></a>使用Maven进源码编译配置</h3><p> 对Idea自带的Maven进行更换</p><p><img src="https://s2.loli.net/2023/11/07/8U4bg5SVnoYATdv.png"></p><p>使用mvn-install进行配置</p><p><img src="https://s2.loli.net/2023/11/07/Qqh3ZvFSBKDOriT.png"></p><p>test时报错 java.lang.RuntimeException: file ‘C:\Program1\DroidBench-master\DroidBench-master\Aliasing&#x2F;SimpleAliasing1.apk’ does not exist!</p><p>发现是Test使用的DroidBench中一部分apk不存在</p><p>使用命令</p><ul><li>mvn -Dskip Tests Install 跳过test后builld成功</li></ul><p><img src="https://s2.loli.net/2023/11/07/Uk6TPlcJaLAb3sC.png"></p><p>再将待测apk放入DroidBench发现可以正常进行测试</p><ul><li>java -jar soot-infoflow-cmd&#x2F;target&#x2F;soot-infoflow-cmd-jar-with-dependencies.jar -a DroidBench&#x2F;EverythingExported.apk -p D:\Development\Android_SDK\platforms\android-34\android.jar -s soot-infoflow-android&#x2F;SourcesAndSinks.txt</li></ul><p><img src="https://s2.loli.net/2023/11/07/J1anNrDjhC39bVI.png"></p><p>首先FlowDroid项目有四个子项目：</p><ul><li>soot-infoflow： 数据流分析核心包（基于Soot）</li><li>soot-infoflowandroid： 与安卓特性相关的数据流分析</li><li>soot-infoflow-summaries：还不清楚，像是做函数摘要的类</li><li>soot-infoflow-cmd：命令行入口</li></ul><h2 id="FlowDroid学习"><a href="#FlowDroid学习" class="headerlink" title="FlowDroid学习"></a>FlowDroid学习</h2><p><img src="https://s2.loli.net/2023/11/07/1BHW6ZRUJKTCmtI.png"></p><p><img src="https://s2.loli.net/2023/11/07/3DLgHAJK4ImVp2M.png"></p><p>先从入口开始，程序入口在soot-infoflow-cmd包下面的<code>soot.jimple.infoflow.cmd.MainClass</code>，主要通过命令传入一些配置，包括但不限于：</p><ul><li>-apkfile：apk文件</li><li>-platformsdir：Android SDK</li><li>-platformsdir： Source &amp; Sink定义</li><li>-outputfile：输出文件</li><li>-timeout：数据流分析超时时间</li><li>-callbacktimeout：callback收集超时时间</li></ul><p>与特性、算法相关：</p><ul><li>-nostatic：不分析静态数据流</li><li>-nocallbacks：不分析callback</li><li>-noexceptions：不分析exception数据流</li><li>-notypechecking：不分析污点类型检查</li><li>-enablereflection：允许反射特性</li><li>-missingsummariesoutputfile：列出函数摘要缺失的类</li><li>-outputlinenumbers：列出bytecode line number</li><li>-taintwrapper：【TODO】这个不是很清楚，可以设置None，EASY，STUBDROID或BULTI</li><li>-taintwrapperfile：设置污点文件</li><li>-aplength：路径最大长度</li><li>-cgalgo：调用图生成算法，e.g. CHA，VTA，RTA，SPARK, GEOM</li><li>-pathalgo：返回结果算法，e.g., CONTEXTSENSITIVE, CONTEXTINSENSITIVE, SOURCESONLY</li><li>-dataflowsolver：数据流解析算法, e.g., CONTEXTFLOWSENSITIVE, FLOWINSENSITIVE</li></ul><p>接着设置ITaintPropagationWrapper，该接口用于使用函数摘要传播污点，主要用于加速分析以及对抗源代码不存在以及native的情况</p><p><img src="https://s2.loli.net/2023/11/07/c8g5dBls6ZzNFkC.png"></p><p>接着根据配置产生一个analyzer（SetupApplication，继承自ITaintWrapperDataFlowAnalysis）；</p><p><img src="https://s2.loli.net/2023/11/07/RvMin5B1uVFro2Z.png"></p><p>最后调用analyzer.runInfoflow()启动分析主流程。</p><p>现在进入了soot-infoflow-android包，在runInfoflow()中，先调用ISourceSinkDefinitionProvider读取source-sink文件，文件可以有三种格式：xml, txt和rifl，接着调用SetupApplication.runInfoflow(ISourceSinkDefinitionProvider)：</p><p><img src="https://s2.loli.net/2023/11/07/COQp7Wfw6P5Utd2.png"></p><p><img src="https://s2.loli.net/2023/11/07/d4MasqkmhcoWb6Q.png"></p><p>在 SetupApplication.runInfoflow(ISourceSinkDefinitionProvider)中，首先初始化Soot——<code>initializeSoot()</code>，包括制定指针分析方法（默认SPARK）、给一些特定调用添加CallGraph边——<code>LibraryClassPatcher.patchLibraries(</code>)；接着读取Android资源和配置文件，包括AndroidManifest.xml文件，这些文件用于获取分析入口；接着对entrypoint进行分析——<code>SetupApplication.processEntryPoint</code>；最后收集分析结果并返回</p><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><ul><li><p><strong>runinfoflow</strong></p><ul><li><p>读取sources and sinks ， 检查ICC（组件内通信机制）以及能否获取生命周期源</p></li><li><p>清空soot 缓存 重新初始化soot实例 （InitializeSoot）</p></li></ul></li></ul><p><img src="https://s2.loli.net/2023/11/07/PxWiy3zm7HRGDQk.jpg"></p><ul><li><p>processEntryPoint</p><ul><li>calculateCallback 收集回调函数  <ul><li>此过程中对Layout进行了解析LayoutFileParser(this.manifest.getPackageName(), this.resources);lfp &#x3D; createLayoutFileParser();<br>calculateCallbackMethods(lfp, entryPoint);</li><li>calculateCallbackMethods 计算回调函数</li><li>进入runAnalysis函数<br>*<img src="https://s2.loli.net/2023/11/07/x9pXGJbFYKOu45f.png"></li></ul></li></ul></li><li><p>runAnalysis</p><ul><li><p>constructCallgraph()</p></li><li><pre><code class="Java">IInfoflowCFG iCfg = icfgFactory.buildBiDirICFG(config.getCallgraphAlgorithm(),                    config.getEnableExceptionTracking());          </code></pre></li></ul></li></ul><p>​    然后用icfg进行数据流分析 进入到runTaintAnalysis</p><ul><li><p>runTaintAnalysis</p><ul><li>大都是一些初始化的工作</li><li><img src="https://s2.loli.net/2023/11/07/786OhAkrSKQdYyJ.png"></li><li>对于source、sink点的统计，其代码如上所示；遍历应用所有的方法，然后使用scanMethodForSourcesSinks函数对方法内的source、sink进行统计，并返回该方法中包含的sink点的数量。</li><li>scanMethodForSourcesSinks!<img src="https://s2.loli.net/2023/11/07/VLspzYIBXMdfO4c.png"></li><li>其主要操作是通过判断方法是否存在方法体，如果存在方法体，则遍历方法体中的所有语句，soot中定义为Unit对象，可以将其强制转化为Stmt对象，可以理解为jimple形式的java语句，然后判断该语句是否在source、sink中包含，被包含的话，如果是source点，则首先将其作为初始0向量（ICFG图起始点）存入zeroValue中，然后保存到collectedSources<a href="https://cloud.tencent.com/product/tke?from_column=20065&from=20065">容器</a>中；如果是sink点则直接存储到collectedSinks容器中。</li></ul></li></ul><p> <img src="https://s2.loli.net/2023/11/07/HlxYj6o1TCgy4Du.png"></p><p>  打印结果</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>找test中的代码然后跟进到analyzeAPKFile方法，最后定位到setupApplication类</p><p><img src="https://s2.loli.net/2023/11/07/PDKp3yacblzxXBk.png"></p><p>先进入顶层的SetupApplication方法，进入runInfoflow()函数，函数的前半部分主要进行一些赋值、初始化的操作，包括Soot的初始化。获取程序入口点后进入processEntryPoint函数进行处理，创建一个resultAggregator用来记录结果，并使用runAnalysis()方法进行分析，runAnalysis中使用Soot来构造控制流图，<img src="/../../app/Typora/pictures/image-20231105194252757.png" alt="image-20231105194252757"></p><p>构建ICFG图</p><p><img src="https://s2.loli.net/2023/11/07/tWsCe6GmHubaj1d.png"></p><p>随后进入到runTaintAnalysis函数，大部分是一些初始化的工作，后向和前向收集，遍历应用所有的方法，然后使用scanMethodForSourcesSinks函数对方法内的source、sink进行统计，并返回该方法中包含的sink点的数量；</p><p><img src="https://s2.loli.net/2023/11/07/Jw2EpdfbFQoDPcR.png"></p><p>最后打印结果。</p><p><img src="https://s2.loli.net/2023/11/07/DLrMtpW8GnHNfmZ.png"></p><p><img src="https://s2.loli.net/2023/11/07/HlxYj6o1TCgy4Du.png"></p><h2 id="Soot学习"><a href="#Soot学习" class="headerlink" title="Soot学习"></a>Soot学习</h2><h4 id="Basic-Soot-Construction"><a href="#Basic-Soot-Construction" class="headerlink" title="Basic Soot Construction"></a>Basic Soot Construction</h4><p>Soot类Body表示单个方法体，对于用于表示代码的每个IR，它都有不同的风格。这些措施是</p><ul><li>BafBody</li><li>GrimpBody</li><li>ShimpleBody</li><li>JimpleBody</li></ul><p>我们可以使用Body来访问各种信息</p><p>我们可以使用Body来访问各种信息，最值得注意的是，我们可以检索声明的局部变量的集合（Soot使用自己的集合实现，称为Chain）（getLocals（）），构成主体的语句（getUnits（））和主体中处理的所有异常（getTraps（））。</p><p>Soot的执行阶段称为<strong>packs</strong></p><p><img src="https://s2.loli.net/2023/11/07/pnMhqzgOEiuLSay.png"></p><p><img src="https://s2.loli.net/2023/11/07/7wl1dtS3u9Nsvxr.png"></p><p>一个字母表示包装接受哪种IR;</p><ul><li>s表示Shimple，j表示Jimple，B表示Baf，g表示Grimp。</li><li>第二个字母指定包的角色; B（body）表示主体创建，t（transfomer）表示用户定义的转换，o（optimism）表示优化，a表示属性生成（注释）。包装名称末尾的p代表“pack”。例如，jap（Jimple注释包）包含所有内置的程序内分析。</li><li>特别感兴趣的包是那些允许用户定义转换的包：jtp（Jimple transformation pack）和stp（Shimple transformation pack）。<strong>任何用户定义的转换（例如来自分析的标记信息）都可以注入到这些包中，然后它们将被包含在Soot 的执行中。</strong></li></ul><p>设计和实现分析之后，我们可能需要能够将其与Soot的其他功能（例如内置分析）结合使用。要做到这一点，我们需要扩展Soot的Main类以包含我们自己的分析。请注意，这不是Java意义上的扩展，而是将我们的分析放入Soot的中间步骤的注入。</p><p>换句话说，我们希望Soot运行我们的分析，并仍然处理我们可能想要传递给它的所有其他选项。如何做到这一点取决于被注入的分析是否是一个inter-process分析。前者需要注入到wjtp阶段，而后者进入jtp阶段。下面的代码示例演示如何将假设类MyAnalysisTagger（执行某些过程内分析）的实例注入到Soot中。</p><p><img src="https://s2.loli.net/2023/11/07/ixZfbWkK2R3PhUQ.png"></p><h4 id="The-Data-Flow-Framework"><a href="#The-Data-Flow-Framework" class="headerlink" title="The Data-Flow Framework"></a>The Data-Flow Framework</h4><p>一般来说，我们可以将流程分析设计为四个步骤。</p><ul><li><p>决定分析的性质是什么。这是一个向后或向前流分析？我们是否需要特别考虑分支？</p></li><li><p>确定预期的近似值。这是一个可能的分析还是一个必须的分析？实际上，您是在决定合并流经节点的信息时是合并还是相交。</p></li><li><p>执行实际流程;本质上是为中间表示中的每种语句编写等式-例如，应该如何处理赋值语句？</p></li><li><p>确定入口节点（如果是反向流，则为出口节点）和内部节点的初始状态或近似值-通常为空集或全集，这取决于分析的保守程度。</p></li></ul><p>​<strong>执行过程间分析时，应用程序的调用图是一个重要的实体。当调用图可用时（仅在整个程序模式下），可以通过类Scene使用方法getCallGraph访问它。CallGraph类和其他相关的构造位于soot.jimple.toolkits.callgraph包中。最简单的调用图是通过类层次分析（CHA）获得的，不需要设置。CHA很简单，因为它假设所有引用变量都可以指向任何正确类型的对象。下面是一个使用CHA访问调用图的示例。</strong></p><p><img src="https://s2.loli.net/2023/11/07/WOohCIMDB6gvSNZ.png"></p><p>Soot提供了三种指针分析的框架，CHA ，SPARK， Paddle</p><p> Soot Pointer Analysis Research Kit（SPARK）框架和Paddle框架以更复杂的设置和速度为代价提供了更准确的分析。</p>]]></content>
      
      
      <categories>
          
          <category> 静态分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FlowDroid </tag>
            
            <tag> 静态分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/06/hello-world/"/>
      <url>/2023/11/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
